{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridIttem.js","components/GifGrid.js","hooks/UseFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridIttem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","UseFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAqDeA,EA5CK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,cAEnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAwBA,OACI,sBAAMC,SAhBW,SAACC,GAGlBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OAExCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SA1Bc,SAACP,GAGvBF,EAAcE,EAAEQ,OAAOF,QAwBfG,YAAY,mC,+BC/BbC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAOfC,EAPe,iDAOkCC,UAAUH,GAP5C,+DAQFI,MAAMF,GARJ,cAQfG,EARe,gBASEA,EAAKC,OATP,uBASbC,EATa,EASbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAfpB,kBAoBdM,GApBc,4CAAH,sDCqBTO,EAAe,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEtC,OACI,sBAAKc,UAAU,yBAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAMA,EAAN,WCiCGO,EA9BC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGf,ECRwB,SAAEA,GAK1B,MAA0Bf,mBAAU,CAChCsB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA8BA,OArBAC,qBAAU,WACNxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAaGqB,ED3BwBK,CAAc1B,GAAjCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAKhDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAGd,qBAAKA,UAAU,YAAf,SAEWH,EAAOJ,KAAK,SAAAC,GAAG,OACX,aADiB,CAChB,EAAD,eAEQA,GADCA,EAAIC,aEzB1BgB,EAxBM,WAElB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEC,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ4C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADJA,Y,MClBnC6B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4406d119.chunk.js","sourcesContent":["/*\r\n    80. Animaciones por CSS en nuestra aplicación\r\n        \r\n*/\r\n\r\nimport React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n//Se hace una desestructuracion del props para entender mejor que esta recibiendo este componente\r\nconst AddCategory = ({ setCategories })  => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    //Funcion que obtienen el valor del evento que lo invoca, en este caso seria el evento del input text\r\n    const handleInputChange = (e) => { \r\n        //Para que el input se actualice con el valor del teclado, se tiene que usar el segundo \r\n        //parametro del hook setInputValue quedando de la siguiente manera\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        // preventDefault es para que no se refresque toda la pagina.\r\n        // De esta manera se evita este comportamiento antiguo en las paginas\r\n        e.preventDefault();  \r\n        \r\n        //Validar que no se agrege a la lista un valor vacio\r\n        if(inputValue.trim().length > 0){\r\n            //Se accede directamente al setCategories de GifExpert.js por q se desestructuro const AddCategory = ({ setCategories })\r\n            setCategories( cats => [ inputValue, ...cats ]); \r\n\r\n            setInputValue(''); // Despues del enter, vacia el valor del input\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\" \r\n                value={inputValue}\r\n                onChange={ handleInputChange } \r\n                placeholder=\"Escribe aqui tu consulta...\"/>\r\n        </form>\r\n    )\r\n}\r\n\r\n//Validar que estemos mandando una funcion, de esta manera obligamos a que usemos este componente\r\n//con los argumentos que estamos esperando, es decir, por lo menos sabemos que tenemos que mandar\r\n//una funcion\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","/*\r\n    80. Animaciones por CSS en nuestra aplicación\r\n\r\n*/\r\n\r\n\r\n/*\r\n    Esta funcion cmo tal, no regresa los Gifs, regresa una promesa que resuelve la \r\n    coleccion de las imagenes.\r\n*/\r\n export  const getGifs = async( category ) => {\r\n\r\n    //const url = 'https://api.giphy.com/v1/gifs/search?q=Goku&limit=20&api_key=qbylOKiqx31WgKZXbW7vaHtVD1hI7jmf';\r\n    //Cambiar las comillas simples por Ballticks\r\n    //En la url setter el parametro de busqueda, para que sea dinamica la consulta\r\n    //Ponemos encodeURI para convertir espacios o caracteres especiales en caracteres\r\n    //validos para html\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=qbylOKiqx31WgKZXbW7vaHtVD1hI7jmf`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n       \r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    } )\r\n    //console.log(gifs);\r\n    //setImage(gifs)\r\n    return gifs;\r\n\r\n}","/*\r\n    80. Animaciones por CSS en nuestra aplicación\r\n\r\n        Las instrucciones para agregar y usar las animaciones en CSS estan en la siguiente \r\n        pagina:\r\n\r\n          https://animate.style/\r\n\r\n\r\n        Maneras de usar las animaciones:\r\n          1. $ npm install animate.css --save\r\n          2. import 'animate.css';\r\n          3. Agregar directamente el html\r\n            <head>\r\n              <link\r\n                rel=\"stylesheet\"\r\n                href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\"\r\n              />\r\n            </head>\r\n\r\n        Se agrego en el index.html:\r\n\r\n        <link\r\n        rel=\"stylesheet\"\r\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\"\r\n        />    \r\n    \r\n*/\r\n\r\nimport React from 'react'\r\n\r\nexport const GifGridIttem = ( {id, title, url} ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__bounceIn\">\r\n            <img src={url} alt={title} />\r\n            <p> { title } </p>\r\n\r\n        </div>\r\n    )\r\n}\r\n","/*\r\n    80. Animaciones por CSS en nuestra aplicación\r\n\r\n        Las instrucciones para agregar y usar las animaciones en CSS estan en la siguiente \r\n        pagina:\r\n\r\n          https://animate.style/\r\n\r\n\r\n        Maneras de usar las animaciones:\r\n          1. $ npm install animate.css --save\r\n          2. import 'animate.css';\r\n          3. Agregar directamente el html\r\n            <head>\r\n              <link\r\n                rel=\"stylesheet\"\r\n                href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\"\r\n              />\r\n            </head>\r\n\r\n        Se agrego en el index.html:\r\n\r\n        <link\r\n        rel=\"stylesheet\"\r\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\"\r\n        />    \r\n\r\n*/\r\n\r\n\r\nimport React from 'react'\r\nimport { UseFetchGifs } from '../hooks/UseFetchGifs'\r\nimport { GifGridIttem } from './GifGridIttem';\r\n\r\n/*\r\n    Lo que hace esta funcion es hacer la peticion http, trae las imagenes, las procesa y \r\n    las retorna, por lo que se va a crear un nuevo componente para que sea mas simple \r\n    este componente\r\n*/\r\nconst GifGrid = ({ category }) => {\r\n\r\n    //Para renombrar la desdestructuracion se usa :images\r\n    const {data:images, loading} = UseFetchGifs( category ); //Este es el custom hook\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n            { \r\n                // loading ? <p>Loading</p> : null\r\n\r\n                // Cuando el valor de setStata del UseFetchGifs cambie, se actualiza loading \r\n                loading && <p className=\"animate__animated animate__flash\">Loading</p> \r\n                                          // y como es un && y loading es false, ya no se ejecuta <p>Loading</p>\r\n            }\r\n            {<div className=\"card-grid\">\r\n                    {\r\n                        images.map( img => ( // Cuando el valor de setStata del UseFetchGifs cambie, se actualizan las imagenes\r\n                            <GifGridIttem\r\n                                key={img.id}\r\n                                {...img}\r\n                            />\r\n                        ))\r\n                    }\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GifGrid\r\n","/* \r\n    80. Animaciones por CSS en nuestra aplicación\r\n\r\n        Las instrucciones para agregar y usar las animaciones en CSS estan en la siguiente \r\n        pagina:\r\n\r\n          https://animate.style/\r\n\r\n\r\n        Maneras de usar las animaciones:\r\n          1. $ npm install animate.css --save\r\n          2. import 'animate.css';\r\n          3. Agregar directamente el html\r\n            <head>\r\n              <link\r\n                rel=\"stylesheet\"\r\n                href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\"\r\n              />\r\n            </head>\r\n\r\n        Se agrego en el index.html:\r\n\r\n        <link\r\n        rel=\"stylesheet\"\r\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\"\r\n        />  \r\n\r\n\r\n        Ya no es necesario tener el setTimeOut\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { getGifs } from '../helpers/GetGifs';\r\n\r\nexport const UseFetchGifs = ( category ) => {\r\n\r\n    // Definimos el estado inicial como un arreglo data vacio y el loading\r\n    // Cuando se use por primera vez el UseFetchGifs, tenemos este estado que estara cargado \r\n    // por defecto\r\n    const [state, setState] = useState( {\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    //Se le pueden poner efectos a los Custom Hooks\r\n    //Aqui es donde se debe hacer la peticion y traer las imagenses\r\n    //Puedo validar el efecto cuando la categoria cambia\r\n    //Los efectos no pueden ser async, por que esperan algo sincrono\r\n    useEffect(() => {\r\n        getGifs( category ) //Esto es una promesa en GetGifs.js\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs, //aqui mandamos las imagenes\r\n                    loading: false //cambia a false por que ya termino de cargar las imagenes\r\n                })                 \r\n            })\r\n    }, [category])\r\n\r\n\r\n    //Hacer la actualizacion manual del loading de true a false\r\n    //setTimeout es una funcion propia de JavaScript que regresa un Callback\r\n    // setTimeout(() => {\r\n    //     setState({\r\n    //         data: [1,2,3,4,5],\r\n    //         loading: false\r\n    //     })\r\n    // }, 3000); // A los 3 segundo va a actualizar el estado de loading\r\n\r\n    //Regresamos el estado\r\n    return state; // { data: [], loading: true }\r\n\r\n}\r\n\r\n/* \r\n    La diferencia que hay con un funtional component, es que la importacion de react no es \r\n    necesaria a menos que nosotros regresemos un JSX, que no es este caso. Por lo tanto\r\n    se puede borrar el import y el return\r\n\r\n    import React from 'react'\r\n\r\n    export const UseFetchGifs = () => {\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n*/\r\n\r\n\r\n","/*\r\n    80. Animaciones por CSS en nuestra aplicación\r\n    \r\n*/\r\n\r\nimport React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n   const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => ( \r\n                        <GifGrid \r\n                            key= { category }\r\n                            category={ category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp/>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}